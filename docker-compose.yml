version: "3.9"

services:
  network-hub-service-frontend:
    build:
      context: ../network-hub-service/frontend
    container_name: network-hub-service-frontend
    depends_on:
      - network-hub-service-backend
    restart: always
    volumes:
      - ../network-hub-service/frontend/nginx.conf:/etc/nginx/conf.d/default.conf
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    networks:
      - network-hub-service-frontend-network
    ports:
      - "80:80"
      - "443:443"
    stdin_open: true
    tty: true

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    depends_on:
      - network-hub-service-frontend
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - network-hub-service-frontend-network

  network-hub-service-backend:
    build:
      context: ../network-hub-service/backend
    container_name: network-hub-service-backend
    depends_on:
      - network-hub-service-db
    restart: always
    volumes:
      - network-hub-service-upload:/app/upload
      - network-hub-service-logs:/app/logs
    environment:
      APP_ADDRESS: 0.0.0.0
      APP_PORT: 8080
      DB_HOST: network-hub-service-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: 1234
      DB_NAME: network-hub-service
      ALLOW_ORIGIN: http://network-hub-service-frontend
      SECRET_KEY: some-secret-key
      USER_SERVICE_ADDRESS: user-service
      USER_SERVICE_PORT: 50051
      ADDRESS_SERVICE_ADDRESS: address-service
      ADDRESS_SERVICE_PORT: 50052
      SEARCH_SERVICE_ADDRESS: search-service
      SEARCH_SERVICE_PORT: 50050
      KAFKA_ADDRESS: kafka
      KAFKA_PORT: 9092
    networks:
      - network-hub-service-frontend-network
      - network-hub-service-backend-network
      - services-channel-network
    ports:
      - "8080:8080"
    command: ["./network-hub-service", "--migration=up"]

  network-hub-service-db:
    image: postgres:15
    restart: always
    volumes:
      - network-hub-service-pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: network-hub-service
    networks:
      - network-hub-service-backend-network

  user-service:
    build:
      context: ../user-service
    container_name: user-service
    depends_on:
      - user-service-db
    restart: always
    volumes:
      - user-service-logs:/app/logs
    environment:
      APP_NETWORK: tcp
      APP_PORT: 50051
      DB_HOST: user-service-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: 1234
      DB_NAME: user-service
      SUPER_ADMIN_PASSWORD: superadmin
      SECRET_KEY: some-secret-key
    networks:
      - services-channel-network
      - user-service-network
    ports:
      - "50051:50051"

  user-service-db:
    image: postgres:15
    restart: always
    volumes:
      - user-service-pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: user-service
    networks:
      - user-service-network

  address-service:
    build:
      context: ../address-service
    container_name: address-service
    depends_on:
      address-service-db:
        condition: service_started
      user-service:
        condition: service_started
      kafka:
        condition: service_healthy
    restart: always
    environment:
      APP_NETWORK: tcp
      APP_PORT: 50052
      DB_HOST: address-service-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: 1234
      DB_NAME: address-service
      USER_SERVICE_ADDRESS: user-service
      USER_SERVICE_PORT: 50051
      SEARCH_SERVICE_ADDRESS: search-service
      SEARCH_SERVICE_PORT: 50050
      KAFKA_ADDRESS: kafka
      KAFKA_PORT: 9092
    networks:
      - address-service-network
      - services-channel-network
    ports:
      - "50052:50052"

  address-service-db:
    image: postgres:15
    restart: always
    volumes:
      - address-service-pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: address-service
    networks:
      - address-service-network

  search-service:
    build: ../search-service
    container_name: search-service
    depends_on:
      elasticsearch:
        condition: service_healthy
      user-service:
        condition: service_started
      kafka:
        condition: service_healthy
    restart: always
    environment:
      APP_NETWORK: tcp
      APP_PORT: 50050
      ELASTICSEARCH_ADDRESS: elasticsearch
      ELASTICSEARCH_PORT: 9200
      KAFKA_ADDRESS: kafka
      KAFKA_PORT: 9092
    networks:
      - es-network
      - services-channel-network
    ports:
      - "50050:50050"

  elasticsearch:
    image: elasticsearch:8.18.2
    container_name: elasticsearch
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      xpack.security.transport.ssl.enabled: false
      xpack.security.http.ssl.enabled: false
      bootstrap.memory_lock: true
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - es-network
    healthcheck:
      test: curl --silent --fail http://localhost:9200/_cluster/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 10

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - services-channel-network
      - kafka-network
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092" ]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  network-hub-service-pgdata:
  user-service-pgdata:
  address-service-pgdata:
  certbot-conf:
  certbot-www:
  network-hub-service-upload:
  network-hub-service-logs:
  user-service-logs:
  esdata:

networks:
  network-hub-service-frontend-network:
  network-hub-service-backend-network:
  user-service-network:
  services-channel-network:
  address-service-network:
  es-network:
  kafka-network: